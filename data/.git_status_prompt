#!/bin/bash

# Status code legend:
#   *   Unstaged code
#   +   Staged code
#   ?   Untracked code
#   $   Stashed code
#   !   Needs author configuration


function print_git_status_prompt {
  local gitdir="$(git rev-parse --git-dir 2>/dev/null)"
  [ -n "$gitdir" ] || return 1


  local rebase
  local branch

  if [ -f "$g/rebase-merge/interactive" ]; then
    rebase="|REBASE-i"
    branch="$(cat "$g/rebase-merge/head-name")"

  elif [ -d "$g/rebase-merge" ]; then
    rebase="|REBASE-m"
    branch="$(cat "$g/rebase-merge/head-name")"

  else
    if [ -d "$g/rebase-apply" ]; then
      if [ -f "$g/rebase-apply/rebasing" ]; then
        rebase="|REBASE"
      elif [ -f "$g/rebase-apply/applying" ]; then
        rebase="|AM"
      else
        rebase="|AM/REBASE"
      fi
    elif [ -f "$g/MERGE_HEAD" ]; then
      rebase="|MERGING"
    elif [ -f "$g/BISECT_LOG" ]; then
      rebase="|BISECTING"
    fi
    branch="$(git symbolic-ref HEAD 2>/dev/null)" ||
      branch="$(git describe --contains HEAD 2>/dev/null)" ||
      branch="$(cut -c1-7 "$g/HEAD" 2>/dev/null)..." ||
      branch="unknown"
  fi


  local noauthor
  local unstaged
  local staged
  local stash
  local untracked

  if [ "true" = "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
    if git rev-parse --quiet --verify HEAD >/dev/null; then
      git diff-index --cached --quiet --ignore-submodules HEAD --  || staged="★ "
    fi
    git rev-parse --verify refs/stash >/dev/null 2>&1              && stash="$"
    [ -n "$(git ls-files --others --exclude-standard)" ]           && untracked="?"
    git diff --no-ext-diff --ignore-submodules --quiet --exit-code || unstaged="☆ "
    git config user.email > /dev/null                              || noauthor="!"

  elif [ "true" = "$(git rev-parse --is-inside-git-dir 2>/dev/null)" ]; then
    branch="GIT_DIR!"
  fi


  echo -n "$noauthor"
  echo -n " ${branch##refs/heads/}"
  echo -n "$stash$untracked$rebase$unstaged$staged"
}

print_git_status_prompt
exit $?
